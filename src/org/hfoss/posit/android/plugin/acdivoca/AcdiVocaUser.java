/*
 * File: AcdiVocaDbUser.java
 * 
 * Copyright (C) 2011 The Humanitarian FOSS Project (http://www.hfoss.org)
 * 
 * This file is part of the ACDI/VOCA plugin for POSIT, Portable Open Search 
 * and Identification Tool.
 *
 * This plugin is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL) as published 
 * by the Free Software Foundation; either version 3.0 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU LGPL along with this program; 
 * if not visit http://www.gnu.org/licenses/lgpl.html.
 * 
 */

package org.hfoss.posit.android.plugin.acdivoca;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hfoss.posit.android.R;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;

/**
 * The User object for creating and persisting data for the user table in the database.
 */
public class AcdiVocaUser {
	public static final String TAG = "AcdiVocaUser";
	
	public enum UserType {SUPER, ADMIN, AGRON, AGRI, USER};

	/**
	 * Default user accounts.
	 */	
	public static final String USER_TYPE_STRING = "UserType";
	public static final String USER_TYPE_KEY= "UserLoginType";

	/**
	 * The fields annotated with @DatabaseField are persisted to the Db.
	 */
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	int id;
	@DatabaseField(uniqueIndex = true)
	String name;
	@DatabaseField
	String password;
	@DatabaseField
	int type;

	AcdiVocaUser() {
		// needed by ormlite
	}

	public AcdiVocaUser(String name, String password, int type) {
		this.name = name;
		this.password = password;
		this.type = type;
	}
	
	/**
	 * Creates the table associated with this object.  And creates the default
	 * users. The table's name is 'acdivocauser', same as the class name. 
	 * @param connectionSource
	 * @param avUserDao
	 */
	public static void init(ConnectionSource connectionSource, Dao<AcdiVocaUser, Integer> avUserDao) {
		try {
			TableUtils.createTable(connectionSource, AcdiVocaUser.class);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

//		// Create some Users
		
		if (!insertUser(avUserDao, "b", "b", UserType.USER))
			Log.e(TAG, "Error adding user = " + "b");
		if (!insertUser(avUserDao, "a", "a", UserType.AGRI))
			Log.e(TAG, "Error adding user = " + "a");
		if (!insertUser(avUserDao, "r", "a", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "r");
		if (!insertUser(avUserDao, "aa", "aa", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "aa");
		if (!insertUser(avUserDao, "auxa", "abba", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxa");
		if (!insertUser(avUserDao, "auxb", "achy", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxb");
		if (!insertUser(avUserDao, "auxc", "acid", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxc");
		if (!insertUser(avUserDao, "auxd", "akin", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxd");
		if (!insertUser(avUserDao, "auxe", "arum", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxe");
		if (!insertUser(avUserDao, "auxf", "ares", UserType.USER))
			Log.e(TAG, "Error adding user = " + "auxf");
		
		if (!insertUser(avUserDao, "admina", "bake", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "admina");
		if (!insertUser(avUserDao, "adminb", "bats", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "adminb");
		if (!insertUser(avUserDao, "adminc", "bins", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "adminc");
		if (!insertUser(avUserDao, "admind", "bops", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "admind");
		if (!insertUser(avUserDao, "bnda", "diva", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "bnda");
		if (!insertUser(avUserDao, "bndb", "dogs", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "bndb");
		if (!insertUser(avUserDao, "bndc", "dyne", UserType.ADMIN))
			Log.e(TAG, "Error adding user = " + "bndc");
		
		if (!insertUser(avUserDao, "agrona", "cabs", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agrona");
		if (!insertUser(avUserDao, "agrone", "coma", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agrone");
		if (!insertUser(avUserDao, "agroni", "cloy", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agroni");
		if (!insertUser(avUserDao, "agrono", "crab", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agrono");
		if (!insertUser(avUserDao, "agronu", "coin", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agronu");
		if (!insertUser(avUserDao, "agrony", "cues", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agrony");
		if (!insertUser(avUserDao, "agronb", "cuke", UserType.AGRON))
			Log.e(TAG, "Error adding user = " + "agronb");

		if (!insertUser(avUserDao, "supera", "ergo", UserType.SUPER))
			Log.e(TAG, "Error adding user = " + "supera");
		if (!insertUser(avUserDao, "superb", "exon", UserType.SUPER))
			Log.e(TAG, "Error adding user = " + "superb");
		if (!insertUser(avUserDao, "superc", "elms", UserType.SUPER))
			Log.e(TAG, "Error adding user = " + "superc");
		if (!insertUser(avUserDao, "hfoss", "hack", UserType.SUPER))
			Log.e(TAG, "Error adding user = " + "hfoss");
		
		
		
		Log.i(TAG, "Created User Accounts");
//		displayUsers(avUserDao);
	}
	
	/**
	 * Inserts new users into the database given the username, password, and type.
	 * Uses ORMlite's DAO. 
	 * @param username
	 * @param password
	 * @param usertype  one of SUPER, ADMIN, USER
	 * @return
	 */
	private static boolean insertUser(Dao<AcdiVocaUser, Integer> avUserDao, String username, String password, UserType usertype) {
		Log.i(TAG, "insertUser " + username + " of type = " + usertype);

		Map<String,Object> map = new HashMap<String,Object>();
		map.put("name", username);
		
		// Query for the username in the user table
		List<AcdiVocaUser> list = null;
		try {
			list = avUserDao.queryForFieldValues(map);
		} catch (SQLException e) {
			Log.e(TAG, "SQL Exception " + e.getMessage());
			e.printStackTrace();
		}
		
		// If the user doesn't already exist, insert it.
		if (list.size() == 0) {
			try {
				avUserDao.create(new AcdiVocaUser(username, password, usertype.ordinal()));
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			return true;
		}
		return false;
	}
	
	/**
	 * Utility method to display the list of users in the acdivocauser table.
	 */
	private static void displayUsers(Dao<AcdiVocaUser, Integer> avUserDao) {
		Log.i(TAG, "Displaying user table");
		
		List<AcdiVocaUser> list = null;
		try {
			list = avUserDao.queryForAll();
		} catch (SQLException e) {
			Log.e(TAG, "SQL Exception " + e.getMessage());
			e.printStackTrace();
		}

		for (AcdiVocaUser item : list) {
			Log.i(TAG, item.toString());
		}
	}
	
	/**
	 * Returns true iff a row containing username and password is found
	 * @param username
	 * @param password
	 * @param rqdUserType is an enum that defines whether this is a regular or super user.
	 * @return Returns the user's type or -1 if authentication fails.
	 */
	public static int authenicateUser(Context context, String username, String password, UserType rqdUserType) {
		Log.i(TAG, "Authenticating user = " + username + " Access type = " + rqdUserType);		
		
		AcdiVocaDbHelper db = new AcdiVocaDbHelper(context);
		Dao<AcdiVocaUser, Integer> avUserDao = null;
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("name", username);
		map.put("password", password);
		List<AcdiVocaUser> list = null;
		int result = 0;
		int userType = 0;
		try {
			avUserDao = db.getAvUserDao();
			list = avUserDao.queryForFieldValues(map);
		} catch (SQLException e) {
			Log.e(TAG, "SQL Exception " + e.getMessage());
			e.printStackTrace();
		}
		Log.i(TAG, "List size = " + list.size());
		if (list.size() != 1) 
			result =  -1;
		else {
			AcdiVocaUser user = list.get(0);
			userType = user.type;
			result = userType;
			Log.i(TAG, "User type = " + userType);
			switch (rqdUserType) {
			case SUPER:
				if (userType != rqdUserType.ordinal()) {
					Log.i(TAG, "Sorry you must be SUPER USER to do this.");
					Toast.makeText(context, context.getString(R.string.toast_adminuser), Toast.LENGTH_SHORT);
					result = -1;
				}
				break;
			case ADMIN:
				if (userType != rqdUserType.ordinal() && userType != UserType.SUPER.ordinal()) {
					Log.i(TAG, "Sorry you must be ADMIN USER to do this.");
					Toast.makeText(context, context.getString(R.string.toast_adminuser), Toast.LENGTH_SHORT);
					result = -1;
				}
				break;
			case AGRON:
				if (userType != rqdUserType.ordinal() && userType != UserType.SUPER.ordinal()) {
					Log.i(TAG, "Sorry you must be ADMIN USER to do this.");
					Toast.makeText(context, context.getString(R.string.toast_adminuser), Toast.LENGTH_SHORT);
					result = -1;
				}
				break;			
			}			
		}
		return result;
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("id=").append(id);
		sb.append(", ").append("name=").append(name);
		sb.append(", ").append("password=").append(password);
		sb.append(", ").append("type=").append(type);
		return sb.toString();
	}
}
